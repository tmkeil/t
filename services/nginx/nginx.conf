#	Redirect HTTP to HTTPS
server {
	listen 80;
	server_name localhost;

	return 301 https://$host:8443$request_uri;
}

#	HTTPS server block
server {
	listen 443 ssl;
	server_name localhost;

	ssl_certificate /etc/nginx/ssl/selfsigned.crt;
	ssl_certificate_key /etc/nginx/ssl/selfsigned.key;

	# location / {
	# 	try_files $uri $uri/ /index.html;
	# }
	location / {
		proxy_pass http://frontend:5173;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# WebSocket/HMR
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
	}

	# API -> Backend
	location /api/ {
		proxy_pass http://backend:3000;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

	location /api {
		proxy_pass http://backend:3000;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# WebSocket/HMR
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
	}

    # WebSockets -> Backend
  	location /ws {
	    proxy_pass http://backend:3000;
	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "Upgrade";
	    proxy_set_header Host $host;
	    # proxy_read_timeout 60s;

		proxy_read_timeout 86400s;
  		proxy_send_timeout 86400s;
	}
}
